plot(dis,nox,col="gray")
rss = matrix(0, 7, 1)
for (i in 0:length(rss)) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ bs(dis, df=i+3), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = i)
}
cat("Residual Sum of Squares: ", rss)
plot(list(degree = 3:10),rss)
rss
length(rss)
plot(dis,nox,col="gray")
rss = matrix(0, 8, 1)
for (i in 1:length(rss)) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ bs(dis, df=i+3), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = i)
}
cat("Residual Sum of Squares: ", rss)
length(rss)
plot(dis,nox,col="gray")
rss = matrix(0, 8, 1)
for (i in 1:length(rss)) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ bs(dis, df=i+2), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = i)
}
cat("Residual Sum of Squares: ", rss)
plot(list(degree = 3:10),rss)
length(rss)
plot(3:10,rss)
plot(c(degree = 3:10),rss)
c(3:10)
plot(degree = c(3:10),rss)
plot(degree <- c(3:10),rss)
plot(c(3:10),rss)
degree = c(3:10)
plot(degree,rss)
lines(degree,rss)
library(MASS)
library(splines)
attach(Boston)
fit = lm(nox ~ poly(dis, degree=3), data = Boston)
dislims=range(dis)
dis.grid=seq(from=dislims[1],to=dislims[2],length.out = 100)
pred = predict(fit,newdata=list(dis=dis.grid))
summary(fit)
plot(dis,nox,col="gray")
lines(dis.grid,pred,lwd=2)
#Part (b): Polynomial fits for a range (1 to 10), and report RSS
plot(dis,nox,col="gray")
rss = matrix(0, 10, 1)
for (i in 1:10) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ poly(dis, degree=i), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = i)
}
cat("Residual Sum of Squares: ", rss)
degree = c(1:10)
plot(degree,rss)
lines(degree, rss)
cat("Optimal Degree of Polynomial: 3")
fit=lm(nox ~ bs(dis, df=4), data=Boston)
pred = predict(fit,newdata=list(dis=dis.grid))
summary(fit)
plot(dis,nox,col = "gray")
lines(dis.grid, pred, lwd = 2)
plot(dis,nox,col="gray")
rss = matrix(0, 8, 1)
for (i in 1:length(rss)) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ bs(dis, df=i+2), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = i)
}
cat("Residual Sum of Squares: ", rss)
degree = c(3:10)
plot(degree,rss)
lines(degree,rss)
View(Boston)
plot(dis)
comd=
comd=`
plot(dis,nox,col="gray")
rss = matrix(0, 12, 1)
for (i in 1:length(rss)) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ bs(dis, df=i+2), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = i)
}
cat("Residual Sum of Squares: ", rss)
#Part(f): Selecting optimal degree of freedom for a regression spline
degree = c(3:14)
plot(degree,rss)
lines(degree,rss)
plot(dis,nox,col="gray")
rss = matrix(0, 20, 1)
for (i in 1:length(rss)) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ bs(dis, df=i+2), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = i)
}
cat("Residual Sum of Squares: ", rss)
#Part(f): Selecting optimal degree of freedom for a regression spline
degree = c(3:22)
plot(degree,rss)
lines(degree,rss)
cat("Optimal Degrees of Freedom for Cubic Spline: 5")
?poly
library(MASS)
library(splines)
attach(Boston)
fit = lm(nox ~ poly(dis, degree=3, raw = TRUE), data = Boston)
dislims=range(dis)
dis.grid=seq(from=dislims[1],to=dislims[2],length.out = 100)
pred = predict(fit,newdata=list(dis=dis.grid))
summary(fit)
plot(dis,nox,col="gray")
title()
lines(dis.grid,pred,lwd=2)
plot(dis,nox,col="gray")
rss = matrix(0, 10, 1)
for (i in 1:10) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ poly(dis, degree=i, raw = TRUE), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = i)
}
cat("Residual Sum of Squares: ", rss)
?Boston
fit = lm(nox ~ poly(dis, degree=3, raw = TRUE), data = Boston)
dislims=range(dis)
dis.grid=seq(from=dislims[1],to=dislims[2],length.out = 100)
pred = predict(fit,newdata=list(dis=dis.grid))
summary(fit)
plot(dis,nox,col="gray", main = "nox vs. dis, Cubic Polynomial Regression",
xlab = "NO Concentration (ppm)", ylab = "Distance")
lines(dis.grid,pred,lwd=2)
?c
?list
?numeric
plot(dis,nox,col="gray", main = "nox vs. dis, Polynomial Fits for Degrees 1-10",
xlab = "NO Concentration (ppm)", ylab = "Distance")
rss = matrix(0, 10, 1)
legend_vec = matrix(0,10,1)
for (i in 1:10) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ poly(dis, degree=i, raw = TRUE), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i,"Degree(s)")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = i)
}
legend("topright",col = color, pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
rainbow(10)
plot(dis,nox,col="gray", main = "nox vs. dis, Polynomial Fits for Degrees 1-10",
xlab = "NO Concentration (ppm)", ylab = "Distance")
rss = matrix(0, 10, 1)
legend_vec = matrix(0,10,1)
for (i in 1:10) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ poly(dis, degree=i, raw = TRUE), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i,"Degree(s)")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = i)
}
legend("topright",col = rainbow(10), pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
plot(dis,nox,col="gray", main = "nox vs. dis, Polynomial Fits for Degrees 1-10",
xlab = "NO Concentration (ppm)", ylab = "Distance")
rss = matrix(0, 10, 1)
legend_vec = matrix(0,10,1)
for (i in 1:10) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ poly(dis, degree=i, raw = TRUE), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i,"Degree(s)")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = rainbow(10)[i])
}
legend("topright",col = rainbow(10), pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
plot(dis,nox,col="gray", main = "nox vs. dis, Polynomial Fits for Degrees 1-10",
xlab = "NO Concentration (ppm)", ylab = "Distance")
rss = matrix(0, 10, 1)
legend_vec = matrix(0,10,1)
for (i in 1:10) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ poly(dis, degree=i, raw = TRUE), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i," Degree(s)")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = rainbow(10)[i])
}
legend("topright",col = rainbow(10), pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
plot(dis,nox,col="gray", main = "nox vs. dis, Polynomial Fits for Degrees 1-10",
xlab = "NO Concentration (ppm)", ylab = "Distance")
rss = matrix(0, 10, 1)
legend_vec = matrix(0,10,1)
for (i in 1:10) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ poly(dis, degree=i, raw = TRUE), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i," Degree(s)")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = i)
}
legend("topright",col = 1:10, pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
?rainbow
plot(dis,nox,col="gray", main = "nox vs. dis, Polynomial Fits for Degrees 1-10",
xlab = "NO Concentration (ppm)", ylab = "Distance")
rss = matrix(0, 10, 1)
legend_vec = matrix(0,10,1)
for (i in 1:10) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ poly(dis, degree=i, raw = TRUE), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i," Degree(s)")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = cm.colors(10)[i])
}
legend("topright",col = cm.colors(10), pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
?rainbow
plot(dis,nox,col="gray", main = "nox vs. dis, Polynomial Fits for Degrees 1-10",
xlab = "NO Concentration (ppm)", ylab = "Distance")
rss = matrix(0, 10, 1)
legend_vec = matrix(0,10,1)
for (i in 1:10) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ poly(dis, degree=i, raw = TRUE), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i," Degree(s)")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = topo.colors(10)[i])
}
legend("topright",col = topo.colors(10), pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
?rainbow
plot(dis,nox,col="gray")
rss = matrix(0, 20, 1)
for (i in 1:length(rss)) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ bs(dis, df=i+2), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i+2," Degrees of Freedom")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = rainbow(20)[i])
}
legend("topright",col = rainbow(10), pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
plot(dis,nox,col="gray")
rss = matrix(0, 15, 1)
for (i in 1:length(rss)) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ bs(dis, df=i+2), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i+2," Degrees of Freedom")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = rainbow(15)[i])
}
legend("topright",col = rainbow(15), pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
plot(dis,nox,col="gray")
rss = matrix(0, 15, 1)
for (i in 1:length(rss)) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ bs(dis, df=i+2), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i+2," Degrees of Freedom")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = rainbow(15)[i])
}
legend("topright",col = rainbow(15), pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
library(MASS)
library(splines)
attach(Boston)
fit = lm(nox ~ poly(dis, degree=3, raw = TRUE), data = Boston)
dislims=range(dis)
dis.grid=seq(from=dislims[1],to=dislims[2],length.out = 100)
plot(dis,nox,col="gray")
rss = matrix(0, 15, 1)
for (i in 1:length(rss)) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ bs(dis, df=i+2), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i+2," Degrees of Freedom")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = rainbow(15)[i])
}
legend("topright",col = rainbow(15), pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
plot(dis,nox,col="gray")
rss = matrix(0, 15, 1)
legend_vec = matrix(0,15,1)
for (i in 1:length(rss)) {
var_name1 = paste0("pred",i)
var_name2 = paste0("fit",i)
assign(var_name2, lm(nox ~ bs(dis, df=i+2), data = Boston))
assign(var_name1, predict(eval(as.name(var_name2)),newdata=list(dis=dis.grid)))
rss[i] = mean(eval(as.name(var_name2))$residuals^2)
legend_vec[i] = paste0(i+2," Degrees of Freedom")
lines(dis.grid,eval(as.name(var_name1)),lwd=2, col = rainbow(15)[i])
}
legend("topright",col = rainbow(15), pch = 1, legend = legend_vec, inset = 0.02)
cat("Residual Sum of Squares: ", rss)
degree = c(3:17)
plot(degree,rss)
lines(degree,rss)
cat("Optimal Degrees of Freedom for Cubic Spline: 10")
?round
?cat
?legend
(54+35)/(54+35+1814+1164)
err_table2
?std
?sd
?hist
?lapply
?sapply
?substitute
substitute( a + b,  list(a = 1), list(b=2))
substitute( a + b,  list(a = 1, b=2))
?lm
?glm
rm(list=ls())
read.csv('C_N_EMA35.csv')
setwd("~/Desktop/NBA-Arbitrage/Data/Normalized Condensed CSVs")
read.csv("C_N_EMA35.csv")
cnema35_chris = read.csv("C_N_EMA35.csv")
setwd("~/Desktop/NBA-Arbitrage/Data")
cnema35_dimitry = read.csv("CEMA35norm.csv")
View(cnema35_dimitry)
View(cnema35_chris)
cnema35_chris$PTS_diff == cnema35_dimitry$PTS_diff
cnema35_chris$PTS_diff
cnema35_chris$PTS_diff.head
cnema35_chris$PTS_diff.head()
head(cnema35_chris$PTS_diff)
head(cnema35_dimitry$PTS_diff)
names(cnema35_dimitry)
varlist1 <- names(cnema35_chris)[27:36]
varlist2 <- names(cnema35_chris)[63:72]
var=rbind(varlist1,varlist2)
models <- apply(var,2, function(x) {
train(substitute(as.factor(win_01)~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),family="binomial",
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})'
varlist1 <- names(cnema35_chris)[27:36]
varlist2 <- names(cnema35_chris)[63:72]
var=rbind(varlist1,varlist2)
models <- apply(var,2, function(x) {
train(substitute(as.factor(win_01)~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),family="binomial",
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
library(caret)
install.packages('caret')
?train
library('caret')
varlist1 <- names(cnema35_chris)[27:36]
varlist2 <- names(cnema35_chris)[63:72]
var=rbind(varlist1,varlist2)
models <- apply(var,2, function(x) {
train(substitute(as.factor(win_01)~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),family="binomial",
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
models <- apply(var,2, function(x) {
train(substitute(as.factor(win_01) ~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),family="binomial",
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
tc = trainControl("cv",10)
models <- apply(var,2, function(x) {
train(substitute(as.factor(win_01) ~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),family="binomial",
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
substitute(as.factor(win_01) ~p+j, list(p = as.name(x[1]),j=as.name(x[2])))
x = var[,1]
x
substitute(as.factor(win_01) ~p+j, list(p = as.name(x[1]),j=as.name(x[2])))
boom = substitute(as.factor(win_01) ~p+j, list(p = as.name(x[1]),j=as.name(x[2])))
train(boom, family="binomial", data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
tc = trainControl("cv",10)
cnema35_chris$win_01 = as.factor(cnema35_chris$win_01)
models <- apply(var,2, function(x) {
train(substitute(win_01~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),family="binomial",
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
rm(tc)
cnema35_chris$win_01 = as.factor(cnema35_chris$win_01)
models <- apply(var,2, function(x) {
train(substitute(win_01~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
?trainControl
?glm
cnema35_chris$win_01
models <- apply(var,2, function(x) {
glm(substitute(win_01~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),family=binomial(logit),
data=cnema35_chris)
})
models
?trainControl
?method
?trian
?train
models[1]
boom = models[1]
boom$coefficients
boom$Coefficients
boom$coefficients
boom
boom = models[[1]]
boom
boom$coefficients
?trainControl
tc = trainControl("cv",10, savePredictions = True)
tc = trainControl("cv",10, savePredictions = T)
tc = trainControl("cv",10, savePredictions = T, cost=function(y, yHat) (y != yHat) + 0, predictArgs=c(type='class'))
tc = trainControl("cv",10, savePredictions = T)
?cv
install.packages(cvTools)
install.packages("cvTools")
library("cvTools")
tc = trainControl("cv",10, savePredictions = T, cost=function(y, yHat) (y != yHat) + 0, predictArgs=c(type='class'))
tc = trainControl("cv",10, savePredictions = T)
models <- apply(var,2, function(x) {
train(substitute(as.factor(win_01)~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
models <- apply(var,2, function(x) {
train(substitute(as.factor(win_01)~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
stopifnot(is.factor(cnema35_chris$win_01))
models <- apply(var,2, function(x) {
train(substitute(as.factor(win_01)~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
models <- apply(var,2, function(x) {
train(substitute(as.factor(win_01)~p+j, list(p = as.name(x[1]),j=as.name(x[2]))),
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
formula("y ~ a+b+c")
models <- apply(var,2, function(x) {
train(formula(substitute(as.factor(win_01)~p+j, list(p = as.name(x[1]),j=as.name(x[2])))),
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
install.packages("e1071")
library("e1071")
models <- apply(var,2, function(x) {
train(formula(substitute(as.factor(win_01)~p+j, list(p = as.name(x[1]),j=as.name(x[2])))),
data=cnema35_chris,method="glm",trControl=tc,family=binomial(link="logit"))
})
models[[1]]
models[[2]]
formula("y ~ a+b+c")
as.name("y ~ a+b+c")
formula("y ~ a+b+c")
models[[1]]
boom = models[[1]]
models[[:]$results]
models[[1]]
models[[1]]$coefficients
models[1]
boom[14]
boom[11]
boom[11]$Coefficients
boom[11][2]
boom[11,2]
boom[11]
boom[11,2]
boom[11]
boom
boom$method
